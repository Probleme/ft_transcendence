services:
  db:
    container_name: myproject_db
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - backend_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    networks:
      - backend_network

  backend:
    build: ./myproject
    volumes:
      - ./myproject:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - MEDIA_URL=https://127.0.0.1:8001/media/
      - STATIC_URL=https://127.0.0.1:8001/static/
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "python", "manage.py", "migrate", "--check"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    restart: always
    networks:
      - backend_network

  frontend:
    build:
      context: ./frontend
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_BACKEND_URL=https://${HOST_IP}:8001
    env_file:
      - .env
    restart: always
    networks:
      - backend_network

  nginx:
    container_name: ft_transcendence-nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - backend_network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=5GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - backend_network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards  # Added dashboards volume
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_SECURITY_ALLOW_EMBEDDING: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - backend_network
    restart: always

  node-exporter:
    image: prom/node-exporter:latest  # Changed image to correct node-exporter
    container_name: ft_transcendence-node-exporter
    user: "0:0"  # Run as root:root
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: always
    networks:
      - backend_network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - backend_network
    depends_on:
      - redis

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: ft_transcendence-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yml"
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: "false"
      PG_EXPORTER_EXCLUDE_DATABASES: "template0,template1"
      # Disable problematic collectors
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: "true"
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "true"
    command:
      - '--no-collector.stat_bgwriter' # Disable the problematic collector
    volumes:
      - ./prometheus/postgres_queries.yml:/etc/postgres_exporter/queries.yml:ro
    ports:
      - "9187:9187"
    networks:
      - backend_network
    depends_on:
      - db
    restart: always
  
  celery_worker:
    build: ./myproject
    command: celery -A myproject worker -l INFO -c 2
    user: celeryuser
    volumes:
      - ./myproject:/app
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    networks:
      - backend_network

  celery_beat:
    build: ./myproject
    command: celery -A myproject beat -l INFO
    user: celeryuser
    volumes:
      - ./myproject:/app
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    networks:
      - backend_network

volumes:
  postgres_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:

networks:
  backend_network:
    driver: bridge