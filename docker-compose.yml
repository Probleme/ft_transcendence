version: '3.8'

services:
  db:
    container_name: myproject_db
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - backend_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    networks:
      - backend_network

  backend:
    build: ./myproject
    volumes:
      - ./myproject:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    restart: always
    networks:
      - backend_network

  frontend:
    build:
      context: ./frontend
    working_dir: /app
    command: sh -c "pnpm install && pnpm run dev"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    env_file:
      - .env
    restart: always
    networks:
      - backend_network

  nginx:
    image: nginx:latest
    ports:
      - "8001:8001"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - backend_network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - backend_network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: always
    networks:
      - backend_network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: always
    networks:
      - backend_network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - backend_network
    depends_on:
      - redis

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.10.1
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    command:
      - '--web.listen-address=:9187'
      - '--web.telemetry-path=/metrics'
      - '--disable-default-metrics'
      - '--disable-settings-metrics'
      - '--extend.query-path=/etc/postgres_exporter/queries.yml'
    volumes:
      - ./prometheus/postgres_queries.yml:/etc/postgres_exporter/queries.yml:ro
    ports:
      - "9187:9187"
    networks:
      - backend_network
    depends_on:
      - db
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:

networks:
  backend_network:
    driver: bridge